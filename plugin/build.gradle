apply plugin: "java-gradle-plugin"
apply plugin: "org.jetbrains.kotlin.jvm"
apply plugin: "maven-publish"

gradlePlugin {
  plugins {
    create("composer") {
      id = "composer"
      implementationClass = "com.trevjonez.composer.ComposerPlugin"
    }
  }
}

dependencies {
  compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$KOTLIN_VERSION")
  compile("com.android.tools.build:gradle:$AGP_VERSION")
  compile(gradleApi())

  testCompile(gradleTestKit())
  testCompile("junit:junit:4.12")
  testCompile("org.assertj:assertj-core:3.5.2")
  testCompile("commons-io:commons-io:2.5")
  testCompile("org.jetbrains.kotlin:kotlin-reflect:$KOTLIN_VERSION")
}

tasks.named("test").configure {
  systemProperty("buildDir", buildDir.absolutePath)
  systemProperty("andApp", new File(rootProject.projectDir, "and-app").absolutePath)
  systemProperty("andLib", new File(rootProject.projectDir, "and-lib").absolutePath)
  systemProperty("org.gradle.testkit.debug", false)

  outputs.dir("$buildDir/tests")
  outputs.dir(new File(rootProject.projectDir, "and-app/build"))
  outputs.dir(new File(rootProject.projectDir, "and-lib/build"))

  inputs.files("gradle.properties")
  inputs.dir(new File(rootProject.projectDir, "and-app/src"))
  inputs.files(new File(rootProject.projectDir, "and-app/build.gradle"))
  inputs.files(new File(rootProject.projectDir, "and-app/build-cascade-dsl.gradle"))
  inputs.files(new File(rootProject.projectDir, "and-app/build-custom-task.gradle"))
  inputs.files(new File(rootProject.projectDir, "and-app/settings.gradle"))

  inputs.dir(new File(rootProject.projectDir, "and-lib/src"))
  inputs.files(new File(rootProject.projectDir, "and-lib/build.gradle"))
  inputs.files(new File(rootProject.projectDir, "and-lib/settings.gradle"))
}

def sourcesJar = tasks.register("sourcesJar", Jar) {
  classifier = "sources"
  from(sourceSets["main"].allSource)
  dependsOn(sourceSets["main"].classesTaskName)
}

publishing {
  publications {
    register("plugin", MavenPublication) {
      from(components["java"])
      artifact(sourcesJar.get())

      pom {
        inceptionYear.set("2017")
        licenses {
          license {
            name.set("The Apache Software License, Version 2.0")
            url.set("http://www.apache.org/licenses/LICENSE-2.0.txt")
            distribution.set("repo")
          }
        }
      }
    }
  }
}